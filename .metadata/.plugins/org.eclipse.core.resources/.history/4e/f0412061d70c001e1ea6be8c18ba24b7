package com.feuji.registration.serviceimpl;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.boot.test.context.SpringBootTest;

import com.feuji.registration.entity.Registration;
import com.feuji.registration.repository.RegistrationRepository;
import com.feuji.registration.repository.RoleRepository;

@SpringBootTest(classes = {RegistrationServiceimplTest.class})
@TestMethodOrder(OrderAnnotation.class)
public class RegistrationServiceimplTest 
{
	@Mock
	private RegistrationRepository registrationRepository;
	
	@Mock
	private RoleRepository roleRepository;
	
	@InjectMocks
	private RegistrationServiceIMPL registrationServiceIMPL;
	
	Registration registration1=new Registration(1, "eventbooking@gmail.com", "Event@123", "false", 3, 9865743245.0, null);
	Registration registration2=new Registration(2, "priya@gmail.com", "Priya@123", "false", 1, 7778891523.0, "true");
	Registration registration3=new Registration(3, "sam@gmail.com", "Sam@1234", "false", 1, 7869504894.0, "true");
	Registration registration4=new Registration(4, "mukesh@gmail.com", "Mukesh@123", "false", 2, 0.0, null);
	Registration registration5=new Registration(2, "fakki@gamil.com", "Fakki@123", "false", 2, 0.0, null);
	Registration registration6=new Registration(3, "borrajumukesh@gmail.com", "Borraju@123", "false", 1, 6758906546.0, "false");
	
	List<Registration> registrations=Arrays.asList(registration1,registration2,registration3,registration4,registration5,registration6);
	
	@Test
	@Order(1)
	@DisplayName("add-registration-1")
	public void save1() //test case 1 for save() method-->add the new registration
	{
		Mockito.when(this.registrationRepository.save(registration1)).thenReturn(registration1);
		Registration actual=this.registrationServiceIMPL.save(registration1);
		assertEquals(registration1, actual);
		assertEquals(registration1.getEmail(), actual.getEmail());
		assertEquals(registration1.getStatus(), actual.getStatus());
	}
	
	@Test
	@Order(2)
	@DisplayName("add-registration-2")
	public void save2() //test case 2 for save() method-->add the new registration
	{
		Mockito.when(this.registrationRepository.save(registration2)).thenReturn(registration2);
		Registration actual=this.registrationServiceIMPL.save(registration2);
		assertEquals(registration2, actual);
		assertEquals(registration2.getEmail(), actual.getEmail());
		assertEquals("Active", actual.getActive());
	}
}
